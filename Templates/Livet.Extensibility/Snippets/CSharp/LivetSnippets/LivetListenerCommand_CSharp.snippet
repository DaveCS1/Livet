<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2008/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Livet ListenerCommand</Title>
      <Shortcut>llcom</Shortcut>
      <Author>Livet Project</Author>
      <Description>Create a ListenerCommand</Description>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Livet.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Parameter type</ToolTip>
          <Default>string</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Command name</ToolTip>
          <Default>Do</Default>
        </Literal>
        <Literal Editable="false">
          <ID>ListenerCommand</ID>
          <!-- WORKAROUND: VS does not handle open generic type with parameter smartly. -->
          <Default>ListenerCommand</Default>
          <!--<Function>SimpleTypeName(global::Livet.Commands.ListenerCommand)</Function>-->
        </Literal>
      </Declarations>
      <Code Language="csharp">
<![CDATA[
private $ListenerCommand$<$type$> _$name$Command;

public $ListenerCommand$<$type$> $name$Command
{
get
{
if (_$name$Command == null)
{
_$name$Command = new $ListenerCommand$<$type$>($name$, Can$name$);
}
return _$name$Command;
}
}

public bool Can$name$()
{
}

public void $name$($type$ parameter)
{
$end$
}
]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>